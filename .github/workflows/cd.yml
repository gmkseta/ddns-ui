name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: gmkseta/ddns-ui

jobs:
  build-and-push:
    name: 🚀 Build & Push to Docker Hub
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          latest=auto
          
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📝 Generate release notes
      if: github.event_name == 'release'
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## 🚀 새 버전 릴리스: ${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📦 Docker 이미지" >> $GITHUB_OUTPUT
        echo '```bash' >> $GITHUB_OUTPUT
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🔗 빠른 실행" >> $GITHUB_OUTPUT
        echo '```bash' >> $GITHUB_OUTPUT
        echo "docker run -d \\" >> $GITHUB_OUTPUT
        echo "  --name ddns-ui \\" >> $GITHUB_OUTPUT
        echo "  -p 3000:3000 \\" >> $GITHUB_OUTPUT
        echo "  -v ddns-data:/app/data \\" >> $GITHUB_OUTPUT
        echo "  -e ADMIN_USERNAME=admin \\" >> $GITHUB_OUTPUT
        echo "  -e ADMIN_PASSWORD=your-password \\" >> $GITHUB_OUTPUT
        echo "  -e JWT_SECRET=your-jwt-secret \\" >> $GITHUB_OUTPUT
        echo "  --restart unless-stopped \\" >> $GITHUB_OUTPUT
        echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📋 주요 변경사항" >> $GITHUB_OUTPUT
        echo "${{ github.event.release.body }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  security-scan:
    name: 🔒 Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: success()
    
    steps:
    - name: 🎉 Send Slack success notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        IMAGE_TAG=${{ github.ref == 'refs/heads/main' && 'latest' || github.ref_name }}
        BRANCH_NAME=${{ github.ref_name }}
        
        curl -X POST "$SLACK_WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d '{
          "text": "🚀 DDNS-UI 배포 성공!",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "🚀 Docker Hub 배포 완료!"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*이미지:*\n`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:'"${IMAGE_TAG}"'`"
                },
                {
                  "type": "mrkdwn",
                  "text": "*커밋:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|'"${SHA}"'>"
                },
                {
                  "type": "mrkdwn",
                  "text": "*브랜치:*\n'"${BRANCH_NAME}"'"
                },
                {
                  "type": "mrkdwn",
                  "text": "*배포 시간:*\n'"$(date -u +"%Y-%m-%d %H:%M:%S UTC")"'"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*🐳 Docker 실행:*\n```docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:'"${IMAGE_TAG}"'```"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*🌍 다국어 지원:*\n• 🇰🇷 한국어: `http://localhost:3000/ko`\n• 🇺🇸 영어: `http://localhost:3000/en`\n• 🇯🇵 일본어: `http://localhost:3000/ja`"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "Docker Hub"
                  },
                  "url": "https://hub.docker.com/r/${{ env.IMAGE_NAME }}"
                },
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "커밋 보기"
                  },
                  "url": "https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
                }
              ]
            }
          ]
        }'

  notify-failure:
    name: 📢 Notify Failure
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: failure()
    
    steps:
    - name: ❌ Send Slack failure notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        BRANCH_NAME=${{ github.ref_name }}
        
        curl -X POST "$SLACK_WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d '{
          "text": "❌ DDNS-UI 배포 실패!",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "❌ Docker Hub 배포 실패!"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*커밋:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|'"${SHA}"'>"
                },
                {
                  "type": "mrkdwn",
                  "text": "*브랜치:*\n'"${BRANCH_NAME}"'"
                },
                {
                  "type": "mrkdwn",
                  "text": "*실패 시간:*\n'"$(date -u +"%Y-%m-%d %H:%M:%S UTC")"'"
                },
                {
                  "type": "mrkdwn",
                  "text": "*워크플로우:*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|로그 확인>"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*🛠️ 해결 방법:*\n1. GitHub Actions 로그 확인\n2. Docker Hub 자격 증명 확인\n3. 빌드 에러 수정 후 다시 푸시"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*🔧 디버깅 팁:*\n• ESLint 오류: `yarn lint --fix`\n• 타입 에러: `yarn type-check`\n• 빌드 에러: `yarn build`\n• Docker 빌드: `docker build -t test .`"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "워크플로우 로그"
                  },
                  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "style": "danger"
                }
              ]
            }
          ]
        }' 