name: Continuous Integration

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: 📦 Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: 🔍 Run ESLint
      run: yarn lint --max-warnings 0
      continue-on-error: false
      
    - name: 🏷️ Run TypeScript type check
      run: yarn type-check
      continue-on-error: false

  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: 📦 Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: 🏗️ Build application
      run: yarn build
      env:
        DATABASE_PATH: './data/db.sqlite3'
        JWT_SECRET: 'test-jwt-secret-for-build'
        ADMIN_USERNAME: 'admin'
        ADMIN_PASSWORD: 'test'

  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: ddns-ui:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: 📦 Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: 🔒 Run security audit
      run: yarn audit --level moderate
      continue-on-error: true
      
    - name: 🔍 Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-review:
    name: 📋 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 📋 Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  pr-labeler:
    name: 🏷️ Auto Label PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Label PR
      uses: actions/labeler@v5
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"

  comment-pr:
    name: 💬 Comment on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    needs: [lint-and-typecheck, build-test, docker-build-test]
    
    permissions:
      pull-requests: write
      
    steps:
    - name: 💬 Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🚀 PR 자동 검사 완료!
            
            ✅ **모든 검사가 통과했습니다!**
            
            ### 📋 검사 항목
            - 🔍 **린트 검사**: ESLint 규칙 준수
            - 🏷️ **타입 검사**: TypeScript 타입 안전성
            - 🏗️ **빌드 테스트**: 프로덕션 빌드 성공
            - 🐳 **Docker 빌드**: 컨테이너 이미지 빌드 성공
            - 🔒 **보안 검사**: 취약점 및 의존성 검토
            
            ### 🎯 다음 단계
            - 코드 리뷰 후 **main** 브랜치에 머지하면 자동으로 Docker Hub에 배포됩니다
            - 머지 전에 모든 CI 검사가 통과해야 합니다
            
            ---
            🤖 *이 댓글은 GitHub Actions에 의해 자동 생성되었습니다*`
          }) 